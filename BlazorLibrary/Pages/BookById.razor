@page "/book/{Id:int}"

@using Microsoft.Fast.Components.FluentUI

@inject LibraryClient LibraryClient
@inject NavigationManager Navigation

<EditForm Model="@book" OnSubmit="@HandleSubmit">
    <fieldset>
        <div>
            <label for="title">Title: </label>
            <InputText name="title" @bind-Value="book.Title" />
        </div>
        <div>
            <label for="year">Year: </label>
            <InputNumber name="year" @bind-Value="book.Year" />
        </div>
        <div>
            <label for="pages">Pages: </label>
            <InputNumber name="pages" @bind-Value="book.Pages" />
        </div>
        <FluentListbox Multiple="true"
                       Items="@allAuthors"
                       OptionValue="@(a => a.Id.ToString())"
                       OptionText="@(a => $"{a.First_name} {a.Last_name}")"
                       @bind-SelectedOptions="@selectedAuthors" />
    </fieldset>
    <fieldset>
        <button type="submit">Save</button>
        <button type="button" onclick="@(() => Navigation.NavigateTo("/books"))">Cancel</button>
    </fieldset>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private BookEditModel book = new();
    private IReadOnlyList<IGetBookById_Authors_Items>? allAuthors;
    private IEnumerable<IGetBookById_Authors_Items>? selectedAuthors;

    public async Task HandleSubmit()
    {
        var result = await LibraryClient.UpdateBook.ExecuteAsync(Id, new UpdateBookInput
            {
                Id = Id,
                Title = book.Title,
                Year = book.Year,
                Pages = book.Pages
            });
        if (result.Errors is null || !result.Errors.Any())
        {
            Navigation.NavigateTo("/books");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await LibraryClient.GetBookById.ExecuteAsync(Id);

        if (data.Data is null || data.Data.Book_by_pk is null)
        {
            Navigation.NavigateTo("/books");
            return;
        }

        book = new()
            {
                Title = data.Data.Book_by_pk.Title,
                Year = data.Data.Book_by_pk.Year,
                Pages = data.Data.Book_by_pk.Pages
            };

        allAuthors = data.Data.Authors.Items;

        selectedAuthors = data.Data.Authors.Items.Where(a => data.Data.Book_by_pk.Authors.Items.Any(b => b.Id == a.Id)).ToList();
    }

    class BookEditModel
    {
        public string? Title { get; set; }
        public int? Year { get; set; }
        public int? Pages { get; set; }
        public List<IGetBookById_Authors_Items> Authors { get; set; } = new();
    }
}